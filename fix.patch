diff --git a/besmokeinventoryapp.client/src/components/ProductInventory.tsx b/besmokeinventoryapp.client/src/components/ProductInventory.tsx
index d12d003c048dc35485be7c7cb325a95ceea53afe..9d1170553a82887bea3eedfc5f60f4cb8e5612bc 100644
--- a/besmokeinventoryapp.client/src/components/ProductInventory.tsx
+++ b/besmokeinventoryapp.client/src/components/ProductInventory.tsx
@@ -1,169 +1,181 @@
 ﻿import React, { useState, useEffect, useCallback } from 'react';
 import AddProduct from './AddProduct';
 import type {
   InventoryStatus,
   Product,
   ProductQuery,
 } from '../services/ProductService';
 import {
   getPagedProducts,
   getInventory,
   adjustInventory,
   updateProduct,
   deleteProduct,
 } from '../services/ProductService';
 
 const ProductInventory: React.FC = () => {
   const [products, setProducts] = useState<Product[]>([]);
   const [inventory, setInventory] = useState<InventoryStatus[]>([]);
   const [sortConfig, setSortConfig] = useState<
-    { key: 'type' | 'size' | 'material' | 'available'; direction: 'asc' | 'desc' } | null
+    { key: 'name' | 'type' | 'size' | 'material' | 'available'; direction: 'asc' | 'desc' } | null
   >(null);
   const [page, setPage] = useState(1);
   const [pageSize] = useState(10);
   const [totalCount, setTotalCount] = useState(0);
 
   const fetchData = useCallback(async () => {
     try {
       const query: ProductQuery = { page, pageSize };
       const [{ products, totalCount }, inventory] = await Promise.all([
         getPagedProducts(query),
         getInventory(),
       ]);
       setProducts(products);
       setInventory(inventory);
       setTotalCount(totalCount);
     } catch (error) {
       console.error('Failed to load data:', error);
     }
   }, [page, pageSize]);
 
   useEffect(() => {
     fetchData();
   }, [fetchData]);
 
   const getQuantity = (productId: number) => {
     const item = inventory.find((i) => i.productId === productId);
     return item?.availableQuantity ?? 0;
   };
 
   const adjust = async (productId: number, change: number) => {
     await adjustInventory(productId, change);
     await fetchData();
   };
 
-  const handleSort = (key: 'type' | 'size' | 'material' | 'available') => {
+  const handleSort = (key: 'name' | 'type' | 'size' | 'material' | 'available') => {
     setSortConfig((prev) => {
       if (prev && prev.key === key) {
         return { key, direction: prev.direction === 'asc' ? 'desc' : 'asc' };
       }
       return { key, direction: 'asc' };
     });
   };
 
   const edit = async (product: Product) => {
     const name = prompt('Name', product.name);
     if (name === null) return;
     const type = prompt('Type', product.type);
     if (type === null) return;
     const size = prompt('Size', product.size);
     if (size === null) return;
     const material = prompt('Material', product.material);
     if (material === null) return;
+    const availableStr = prompt('Available', getQuantity(product.id).toString());
+    if (availableStr === null) return;
+    const available = Number(availableStr);
     await updateProduct({ ...product, name, type, size, material });
+    const diff = available - getQuantity(product.id);
+    if (diff !== 0) {
+      await adjustInventory(product.id, diff);
+    }
     alert('Product updated!');
     await fetchData();
   };
 
   const remove = async (id: number) => {
     if (confirm('Are you sure you want to delete this product?')) {
       await deleteProduct(id);
       alert('Product deleted!');
       await fetchData();
     }
   };
 
   const rows = products.map((p) => ({ ...p, available: getQuantity(p.id) }));
 
   if (sortConfig) {
     rows.sort((a, b) => {
       const aVal = a[sortConfig.key];
       const bVal = b[sortConfig.key];
       if (typeof aVal === 'string' && typeof bVal === 'string') {
         return sortConfig.direction === 'asc'
           ? aVal.localeCompare(bVal)
           : bVal.localeCompare(aVal);
       }
       return sortConfig.direction === 'asc'
         ? (aVal as number) - (bVal as number)
         : (bVal as number) - (aVal as number);
     });
   }
 
   const totalPages = Math.ceil(totalCount / pageSize) || 1;
 
   return (
     <div
       style={{
         backgroundColor: '#f7f7f7',
         minHeight: '100vh',
         padding: '2rem',
         fontFamily: 'Arial, sans-serif',
       }}
     >
       <AddProduct onAdd={fetchData} />
       <h2 style={{ textAlign: 'center' }}>Product Inventory</h2>
       <table
         style={{ width: '100%', borderCollapse: 'collapse', backgroundColor: '#fff' }}
       >
         <thead>
           <tr style={{ backgroundColor: '#ddd' }}>
-            <th style={thStyle}>Name</th>
+            <th
+              style={{ ...thStyle, cursor: 'pointer' }}
+              onClick={() => handleSort('name')}
+            >
+              Name {sortConfig?.key === 'name' ? (sortConfig.direction === 'asc' ? '▲' : '▼') : ''}
+            </th>
             <th
               style={{ ...thStyle, cursor: 'pointer' }}
               onClick={() => handleSort('type')}
             >
-              Type
+              Type {sortConfig?.key === 'type' ? (sortConfig.direction === 'asc' ? '▲' : '▼') : ''}
             </th>
             <th
               style={{ ...thStyle, cursor: 'pointer' }}
               onClick={() => handleSort('size')}
             >
-              Size
+              Size {sortConfig?.key === 'size' ? (sortConfig.direction === 'asc' ? '▲' : '▼') : ''}
             </th>
             <th
               style={{ ...thStyle, cursor: 'pointer' }}
               onClick={() => handleSort('material')}
             >
-              Material
+              Material {sortConfig?.key === 'material' ? (sortConfig.direction === 'asc' ? '▲' : '▼') : ''}
             </th>
             <th
               style={{ ...thStyle, cursor: 'pointer' }}
               onClick={() => handleSort('available')}
             >
-              Available
+              Available {sortConfig?.key === 'available' ? (sortConfig.direction === 'asc' ? '▲' : '▼') : ''}
             </th>
             <th style={thStyle}>Adjust</th>
             <th style={thStyle}>Actions</th>
           </tr>
         </thead>
         <tbody>
           {rows.map((product) => (
             <tr
               key={product.id}
               style={{
                 backgroundColor: product.available < 50 ? '#ffe0e0' : 'white',
                 color: product.available < 50 ? '#b00000' : 'black',
                 borderBottom: '1px solid #ccc',
               }}
             >
               <td style={tdStyle}>{product.name}</td>
               <td style={tdStyle}>{product.type}</td>
               <td style={tdStyle}>{product.size}</td>
               <td style={tdStyle}>{product.material}</td>
               <td style={tdStyle}>{product.available}</td>
               <td style={tdStyle}>
                 <button style={btnStyle} onClick={() => adjust(product.id, 1)}>
                   ＋
                 </button>
                 <button style={btnStyle} onClick={() => adjust(product.id, -1)}>
