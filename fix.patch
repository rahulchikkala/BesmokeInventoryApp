diff --git a/besmokeinventoryapp.client/src/components/AddProduct.tsx b/besmokeinventoryapp.client/src/components/AddProduct.tsx
index b5b073484029bbf58e8779a803b6aadb1b04d667..6a119f51f9a71ead7714db9ebb39c18375d64405 100644
--- a/besmokeinventoryapp.client/src/components/AddProduct.tsx
+++ b/besmokeinventoryapp.client/src/components/AddProduct.tsx
@@ -4,57 +4,55 @@ import { addProduct } from '../services/ProductService';
 interface AddProductProps {
   onAdd?: () => void;
 }
 
 // A small button that opens a modal to add a product.
 // This keeps the main inventory list as the primary focus.
 const AddProduct: React.FC<AddProductProps> = ({ onAdd }) => {
   const [form, setForm] = useState({
     name: '',
     type: '',
     size: '',
     material: '',
     initialQuantity: 0,
   });
   const [open, setOpen] = useState(false);
 
   const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
     const { name, value } = e.target;
     setForm({ ...form, [name]: name === 'initialQuantity' ? Number(value) : value });
   };
 
   const handleSubmit = async (e: React.FormEvent) => {
     e.preventDefault();
     try {
       await addProduct(form);
-      alert('Product added!');
       setForm({ name: '', type: '', size: '', material: '', initialQuantity: 0 });
-      onAdd?.();
+      await onAdd?.();
       setOpen(false);
     } catch (error) {
       console.error(error);
-      alert('Error adding product');
     }
   };
 
   return (
     <>
       <button className="btn btn-success" onClick={() => setOpen(true)}>
         Add Product
       </button>
       {open && (
         <div style={overlayStyle}>
           <div style={modalStyle}>
             <h4 className="section-title text-primary">Add Product</h4>
             <form onSubmit={handleSubmit}>
               {(['name', 'type', 'size', 'material'] as const).map((field) => (
                 <div className="mb-2" key={field}>
                   <input
                     className="form-control"
                     name={field}
                     placeholder={field}
                     value={form[field]}
                     onChange={handleChange}
                     required
                   />
                 </div>
               ))}
