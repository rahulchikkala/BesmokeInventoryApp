diff --git a/besmokeinventoryapp.client/src/components/ProductInventory.tsx b/besmokeinventoryapp.client/src/components/ProductInventory.tsx
index 6500b581eb2ea2cd5c052ace7374b4d18708d26d..8cd1e7bb1e249f247ac105d5f4b55e4f52cf0c53 100644
--- a/besmokeinventoryapp.client/src/components/ProductInventory.tsx
+++ b/besmokeinventoryapp.client/src/components/ProductInventory.tsx
@@ -1,75 +1,91 @@
 import React, { useState, useEffect, useCallback } from 'react';
 import AddProduct from './AddProduct';
 import type {
   InventoryStatus,
   Product,
   ProductQuery,
 } from '../services/ProductService';
 import {
   getPagedProducts,
   getInventory,
   adjustInventory,
   updateProduct,
   deleteProduct,
+  searchProducts,
 } from '../services/ProductService';
 
 const ProductInventory: React.FC = () => {
   const [products, setProducts] = useState<Product[]>([]);
   const [inventory, setInventory] = useState<InventoryStatus[]>([]);
   const [sortConfig, setSortConfig] = useState<
     { key: 'name' | 'type' | 'size' | 'material' | 'available'; direction: 'asc' | 'desc' } | null
   >(null);
   const [page, setPage] = useState(1);
   const [pageSize] = useState(10);
   const [totalCount, setTotalCount] = useState(0);
+  const [search, setSearch] = useState('');
   const [editingProduct, setEditingProduct] = useState<(Product & { available: number }) | null>(null);
   const [deleteId, setDeleteId] = useState<number | null>(null);
   const [message, setMessage] = useState<string | null>(null);
 
   const fetchData = useCallback(async () => {
     try {
-      const query: ProductQuery = { page, pageSize };
-      const [{ products, totalCount }, inventory] = await Promise.all([
-        getPagedProducts(query),
-        getInventory(),
-      ]);
-      setProducts(products);
-      setInventory(inventory);
-      setTotalCount(totalCount);
+      if (search) {
+        const [products, inventory] = await Promise.all([
+          searchProducts(search),
+          getInventory(),
+        ]);
+        setProducts(products);
+        setInventory(inventory);
+        setTotalCount(products.length);
+      } else {
+        const query: ProductQuery = { page, pageSize };
+        const [{ products, totalCount }, inventory] = await Promise.all([
+          getPagedProducts(query),
+          getInventory(),
+        ]);
+        setProducts(products);
+        setInventory(inventory);
+        setTotalCount(totalCount);
+      }
     } catch (error) {
       console.error('Failed to load data:', error);
     }
-  }, [page, pageSize]);
+  }, [page, pageSize, search]);
   const handleProductAdded = async () => {
     await fetchData();
     setMessage('Product added!');
   };
   useEffect(() => {
     fetchData();
   }, [fetchData]);
 
+  useEffect(() => {
+    setPage(1);
+  }, [search]);
+
   useEffect(() => {
     if (!message) return;
     const timer = setTimeout(() => setMessage(null), 3000);
     return () => clearTimeout(timer);
   }, [message]);
 
   const getQuantity = (productId: number) => {
     const item = inventory.find((i) => i.productId === productId);
     return item?.availableQuantity ?? 0;
   };
 
   const adjust = async (productId: number, change: number) => {
     await adjustInventory(productId, change);
     await fetchData();
   };
 
   const handleSort = (key: 'name' | 'type' | 'size' | 'material' | 'available') => {
     setSortConfig((prev) => {
       if (prev && prev.key === key) {
         return { key, direction: prev.direction === 'asc' ? 'desc' : 'asc' };
       }
       return { key, direction: 'asc' };
     });
   };
 
diff --git a/besmokeinventoryapp.client/src/components/ProductInventory.tsx b/besmokeinventoryapp.client/src/components/ProductInventory.tsx
index 6500b581eb2ea2cd5c052ace7374b4d18708d26d..8cd1e7bb1e249f247ac105d5f4b55e4f52cf0c53 100644
--- a/besmokeinventoryapp.client/src/components/ProductInventory.tsx
+++ b/besmokeinventoryapp.client/src/components/ProductInventory.tsx
@@ -93,58 +109,69 @@ const ProductInventory: React.FC = () => {
   const confirmDelete = async () => {
     if (deleteId === null) return;
     await deleteProduct(deleteId);
     setDeleteId(null);
     setMessage('Product deleted!');
     await fetchData();
   };
 
   const rows = products.map((p) => ({ ...p, available: getQuantity(p.id) }));
 
   if (sortConfig) {
     rows.sort((a, b) => {
       const aVal = a[sortConfig.key];
       const bVal = b[sortConfig.key];
       if (typeof aVal === 'string' && typeof bVal === 'string') {
         return sortConfig.direction === 'asc'
           ? aVal.localeCompare(bVal)
           : bVal.localeCompare(aVal);
       }
       return sortConfig.direction === 'asc'
         ? (aVal as number) - (bVal as number)
         : (bVal as number) - (aVal as number);
     });
   }
 
-  const totalPages = Math.ceil(totalCount / pageSize) || 1;
+  const totalPages = search ? 1 : Math.ceil(totalCount / pageSize) || 1;
 
   return (
     <>
       <div className="card shadow-sm p-4">
       <div className="d-flex justify-content-between align-items-center mb-3">
         <h4 className="section-title text-primary mb-0">Product Inventory</h4>
-         <AddProduct onAdd={handleProductAdded} />
+        <div className="d-flex align-items-center">
+          <div className="search-container me-2">
+            <i className="bi bi-search"></i>
+            <input
+              type="text"
+              placeholder="Search..."
+              value={search}
+              onChange={(e) => setSearch(e.target.value)}
+            />
+          </div>
+          <AddProduct onAdd={handleProductAdded} />
+        </div>
       </div>
 
         <div className="table-responsive">
           <table className="table table-striped table-hover table-bordered table-sm align-middle">
             <thead className="table-light">
               <tr>
                 <th>ID</th>
                 <th
                   style={{ cursor: 'pointer' }}
                   onClick={() => handleSort('name')}
                 >
                   Name {sortConfig?.key === 'name' ? (sortConfig.direction === 'asc' ? '▲' : '▼') : ''}
                 </th>
                 <th
                   style={{ cursor: 'pointer' }}
                   onClick={() => handleSort('type')}
                 >
                   Type {sortConfig?.key === 'type' ? (sortConfig.direction === 'asc' ? '▲' : '▼') : ''}
                 </th>
                 <th
                   style={{ cursor: 'pointer' }}
                   onClick={() => handleSort('size')}
                 >
                   Size {sortConfig?.key === 'size' ? (sortConfig.direction === 'asc' ? '▲' : '▼') : ''}
                 </th>
diff --git a/besmokeinventoryapp.client/src/components/ProductInventory.tsx b/besmokeinventoryapp.client/src/components/ProductInventory.tsx
index 6500b581eb2ea2cd5c052ace7374b4d18708d26d..8cd1e7bb1e249f247ac105d5f4b55e4f52cf0c53 100644
--- a/besmokeinventoryapp.client/src/components/ProductInventory.tsx
+++ b/besmokeinventoryapp.client/src/components/ProductInventory.tsx
@@ -170,86 +197,90 @@ const ProductInventory: React.FC = () => {
                   key={product.id}
                   className={product.available < 50 ? 'table-danger' : ''}
                 >
                   <td>{product.id}</td>
                   <td>{product.name}</td>
                   <td>{product.type}</td>
                   <td>{product.size}</td>
                   <td>{product.material}</td>
                   <td>{product.available}</td>
                   <td>
                     <button
                       className="btn btn-sm btn-outline-primary me-1"
                       onClick={() => adjust(product.id, 1)}
                     >
                       ＋
                     </button>
                     <button
                       className="btn btn-sm btn-outline-secondary"
                       onClick={() => adjust(product.id, -1)}
                     >
                       －
                     </button>
                   </td>
                   <td>
                     <button
-                      className="btn btn-sm btn-primary me-1"
+                      className="btn btn-sm btn-primary me-1 icon-btn"
                       onClick={() => openEdit(product)}
                     >
-                      Edit
+                      <i className="bi bi-pencil"></i>
+                      <span className="btn-label">Edit</span>
                     </button>
                     <button
-                      className="btn btn-sm btn-danger"
+                      className="btn btn-sm btn-danger icon-btn"
                       onClick={() => setDeleteId(product.id)}
                     >
-                      Delete
+                      <i className="bi bi-trash"></i>
+                      <span className="btn-label">Delete</span>
                     </button>
                   </td>
                 </tr>
               ))}
             </tbody>
           </table>
         </div>
-        <div className="text-center mt-3">
-          <button
-            className="btn btn-primary me-2"
-            onClick={() => setPage((p) => Math.max(1, p - 1))}
-            disabled={page === 1}
-          >
-            Previous
-          </button>
-          <span>
-            Page {page} of {totalPages}
-          </span>
-          <button
-            className="btn btn-primary ms-2"
-            onClick={() => setPage((p) => Math.min(totalPages, p + 1))}
-            disabled={page === totalPages}
-          >
-            Next
-          </button>
-        </div>
+        {!search && (
+          <div className="text-center mt-3">
+            <button
+              className="btn btn-primary me-2"
+              onClick={() => setPage((p) => Math.max(1, p - 1))}
+              disabled={page === 1}
+            >
+              Previous
+            </button>
+            <span>
+              Page {page} of {totalPages}
+            </span>
+            <button
+              className="btn btn-primary ms-2"
+              onClick={() => setPage((p) => Math.min(totalPages, p + 1))}
+              disabled={page === totalPages}
+            >
+              Next
+            </button>
+          </div>
+        )}
       </div>
 
       {editingProduct && (
         <div style={overlayStyle}>
           <div style={modalStyle}>
             <h3>Edit Product</h3>
             <label>
               Name
               <input
                 style={inputStyle}
                 value={editingProduct.name}
                 onChange={(e) =>
                   setEditingProduct({ ...editingProduct, name: e.target.value })
                 }
               />
             </label>
             <label>
               Type
               <input
                 style={inputStyle}
                 value={editingProduct.type}
                 onChange={(e) =>
                   setEditingProduct({ ...editingProduct, type: e.target.value })
                 }
               />
