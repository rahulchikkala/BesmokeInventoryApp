diff --git a/besmokeinventoryapp.client/src/components/InventoryHistory.tsx b/besmokeinventoryapp.client/src/components/InventoryHistory.tsx
index 9bcecbef74e3e24e26d87ae908a74e12414cce3b..81edf6b46a668392f04dcb257c4d592d4c428fa4 100644
--- a/besmokeinventoryapp.client/src/components/InventoryHistory.tsx
+++ b/besmokeinventoryapp.client/src/components/InventoryHistory.tsx
@@ -114,50 +114,54 @@ const InventoryHistory: React.FC = () => {
         break;
       case 'timestamp':
         cmp = new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime();
         break;
     }
     return sortAsc ? cmp : -cmp;
   });
   const paginatedOps = search
     ? sortedOps.slice((page - 1) * pageSize, page * pageSize)
     : sortedOps;
 
   useEffect(() => {
     if (page > totalPages) {
       setPage(1);
     }
   }, [totalPages, page]);
   
   const handleSort = (key: typeof sortKey) => {
     if (key === sortKey) {
       setSortAsc(!sortAsc);
     } else {
       setSortKey(key);
       setSortAsc(true);
     }
   };
+  const getSortIcon = (key: typeof sortKey) => {
+    if (sortKey !== key) return 'bi-chevron-expand';
+    return sortAsc ? 'bi-chevron-up' : 'bi-chevron-down';
+  };
   const exportCsv = async () => {
     try {
       const range = getRange();
       const allOps = await getInventoryOperations(range.startTime, range.endTime);
       const filtered = allOps.filter(op => {
         const product = products.find(p => p.id === op.productId);
         const name = product ? product.name : op.productName;
         return (
           name.toLowerCase().includes(search.toLowerCase()) ||
           op.productId.toString().includes(search)
         );
       });
       const rows = filtered.map(op => {
         const product = products.find(p => p.id === op.productId);
         const name = product ? product.name : op.productName;
         const type = product ? product.type : op.productType;
         const size = product ? product.size : op.size;
         const material = product ? product.material : op.material;
         return [
           op.id ?? '',
           name,
           op.productId,
           type,
           size,
           material,
diff --git a/besmokeinventoryapp.client/src/components/InventoryHistory.tsx b/besmokeinventoryapp.client/src/components/InventoryHistory.tsx
index 9bcecbef74e3e24e26d87ae908a74e12414cce3b..81edf6b46a668392f04dcb257c4d592d4c428fa4 100644
--- a/besmokeinventoryapp.client/src/components/InventoryHistory.tsx
+++ b/besmokeinventoryapp.client/src/components/InventoryHistory.tsx
@@ -198,78 +202,78 @@ const InventoryHistory: React.FC = () => {
           }}
         />
         <select
           className="form-select w-auto"
           value={timeFilter}
           onChange={e => {
             setTimeFilter(e.target.value);
             setPage(1);
           }}
         >
           <option value="all">All Time</option>
           <option value="1h">Last 1 Hour</option>
           <option value="24h">Last 24 Hours</option>
           <option value="7d">Last 7 Days</option>
           <option value="24d">Last 24 Days</option>
         </select>
         <button className="btn btn-sm btn-primary" onClick={exportCsv}>Export CSV</button>
       </div>
       {filteredOps.length === 0 ? (
         <p>No operations found.</p>
       ) : (
          <div className="table-responsive">
         <table className="table table-striped table-hover table-bordered table-sm align-middle">
           <thead className="table-light">
             <tr>
-<th onClick={() => handleSort('id')}>
-              ID {sortKey === 'id' ? (sortAsc ? '▲' : '▼') : ''}
+            <th className="sortable" onClick={() => handleSort('id')}>
+              ID <i className={`bi ${getSortIcon('id')}`}></i>
             </th>
-            <th onClick={() => handleSort('product')}>
-              Product {sortKey === 'product' ? (sortAsc ? '▲' : '▼') : ''}
+            <th className="sortable" onClick={() => handleSort('product')}>
+              Product <i className={`bi ${getSortIcon('product')}`}></i>
             </th>
-            <th onClick={() => handleSort('productId')}>
-              Product ID {sortKey === 'productId' ? (sortAsc ? '▲' : '▼') : ''}
+            <th className="sortable" onClick={() => handleSort('productId')}>
+              Product ID <i className={`bi ${getSortIcon('productId')}`}></i>
             </th>
-           <th onClick={() => handleSort('type')}>
-              Type {sortKey === 'type' ? (sortAsc ? '▲' : '▼') : ''}
+            <th className="sortable" onClick={() => handleSort('type')}>
+              Type <i className={`bi ${getSortIcon('type')}`}></i>
             </th>
-            <th onClick={() => handleSort('size')}>
-              Size {sortKey === 'size' ? (sortAsc ? '▲' : '▼') : ''}
+            <th className="sortable" onClick={() => handleSort('size')}>
+              Size <i className={`bi ${getSortIcon('size')}`}></i>
             </th>
-            <th onClick={() => handleSort('material')}>
-              Material {sortKey === 'material' ? (sortAsc ? '▲' : '▼') : ''}
+            <th className="sortable" onClick={() => handleSort('material')}>
+              Material <i className={`bi ${getSortIcon('material')}`}></i>
             </th>
-            <th onClick={() => handleSort('change')}>
-              Change {sortKey === 'change' ? (sortAsc ? '▲' : '▼') : ''}
+            <th className="sortable" onClick={() => handleSort('change')}>
+              Change <i className={`bi ${getSortIcon('change')}`}></i>
             </th>
-        <th onClick={() => handleSort('available')}>
-              Available {sortKey === 'available' ? (sortAsc ? '▲' : '▼') : ''}
+            <th className="sortable" onClick={() => handleSort('available')}>
+              Available <i className={`bi ${getSortIcon('available')}`}></i>
             </th>
             <th>Action</th>
-              <th>Details</th>
-            <th onClick={() => handleSort('timestamp')}>
-              Timestamp {sortKey === 'timestamp' ? (sortAsc ? '▲' : '▼') : ''}
+            <th>Details</th>
+            <th className="sortable" onClick={() => handleSort('timestamp')}>
+              Timestamp <i className={`bi ${getSortIcon('timestamp')}`}></i>
             </th>
             </tr>
           </thead>
           <tbody>
           {paginatedOps.map(op => {
               const product = products.find(p => p.id === op.productId);
               const name = product
                 ? op.productName !== product.name
                   ? `${op.productName} (now ${product.name})`
                   : op.productName
                 : op.productName;
                  const type = product
                 ? op.productType !== product.type
                   ? `${op.productType} (now ${product.type})`
                   : op.productType
                 : op.productType;
               const size = product
                 ? op.size !== product.size
                   ? `${op.size} (now ${product.size})`
                   : op.size
                 : op.size;
               const material = product
                 ? op.material !== product.material
                   ? `${op.material} (now ${product.material})`
                   : op.material
