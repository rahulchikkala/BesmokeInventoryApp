diff --git a/besmokeinventoryapp.client/src/components/InventoryHistory.tsx b/besmokeinventoryapp.client/src/components/InventoryHistory.tsx
index e29f6c8ab07e6fd75f7c93595e17437cca1929f6..f740f84967ce744eaea280428239009115a31104 100644
--- a/besmokeinventoryapp.client/src/components/InventoryHistory.tsx
+++ b/besmokeinventoryapp.client/src/components/InventoryHistory.tsx
@@ -63,63 +63,63 @@ const InventoryHistory: React.FC = () => {
       op.productId.toString().includes(search)
     );
   });
  const totalPages = search
     ? Math.ceil(filteredOps.length / pageSize) || 1
     : Math.ceil(totalCount / pageSize) || 1;
   const sortedOps = [...filteredOps].sort((a, b) => {
     let cmp = 0;
     const nameA = (products.find(p => p.id === a.productId)?.name ?? a.productName).toLowerCase();
     const nameB = (products.find(p => p.id === b.productId)?.name ?? b.productName).toLowerCase();
     const typeA = (products.find(p => p.id === a.productId)?.type ?? a.productType).toLowerCase();
     const typeB = (products.find(p => p.id === b.productId)?.type ?? b.productType).toLowerCase();
     const sizeA = (products.find(p => p.id === a.productId)?.size ?? a.size).toLowerCase();
     const sizeB = (products.find(p => p.id === b.productId)?.size ?? b.size).toLowerCase();
     const materialA = (products.find(p => p.id === a.productId)?.material ?? a.material).toLowerCase();
     const materialB = (products.find(p => p.id === b.productId)?.material ?? b.material).toLowerCase();
     switch (sortKey) {
       case 'id':
         cmp = (a.id ?? 0) - (b.id ?? 0);
         break;
       case 'product':
         cmp = nameA.localeCompare(nameB);
         break;
       case 'productId':
         cmp = a.productId - b.productId;
-        case 'type':
+        break;
+      case 'type':
         cmp = typeA.localeCompare(typeB);
         break;
       case 'size':
         cmp = sizeA.localeCompare(sizeB);
         break;
       case 'material':
         cmp = materialA.localeCompare(materialB);
         break;
       case 'available':
         cmp = a.availableQuantity - b.availableQuantity;
         break;
-        break;
       case 'change':
         cmp = a.quantityChange - b.quantityChange;
         break;
       case 'timestamp':
         cmp = new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime();
         break;
     }
     return sortAsc ? cmp : -cmp;
   });
   const paginatedOps = search
     ? sortedOps.slice((page - 1) * pageSize, page * pageSize)
     : sortedOps;
 
   useEffect(() => {
     if (page > totalPages) {
       setPage(1);
     }
   }, [totalPages, page]);
   
   const handleSort = (key: typeof sortKey) => {
     if (key === sortKey) {
       setSortAsc(!sortAsc);
     } else {
       setSortKey(key);
       setSortAsc(true);
